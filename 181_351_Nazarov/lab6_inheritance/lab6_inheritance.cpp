// lab6_inheritance.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include "pch.h"
#include <iostream>

// Наследование - заимствование свойств и методов родительского класса в производном классе
//синтаксис:
//class имя_произв_класса:[тип_наследования] имя_родительского_класса1,(private...,остальные в дочернем классе)
//                        [тип_наследования] имя_родительского_класса2
//
//{
// //...
//};
// где "тип_наследования" - тоже public, protected, private
//но указывать не обязательно


//в род.                             в заголовкепри наследовании
//классе                          public:       protected:         private:   

//public:                         public:       protected:         private:
//protected:                      protected:    protected:         private:
//private:                        недоступно    недоступно         недоступно



//2.Метод, переопределенный в дочернем лассе полностью заменит унаследованный родителький метод
//Чтобы при запуске нового дочернего метода также выполнять и родительсий необходимо уазать, что это явно
//в родительском классе void weapon::reload() {};
//в дочеснем классе void rifle::relad():weapon::reload(),...{};

//3.Если объявить метод со словами virtual, в данном классе можно не приводить реализацию метода 
//и определить его ()привести реализацию) только в дочерних классах

//4. void fnc1( const(если никак нельзя менять значение)тип1 параметр1, тип2 параметр2)
//{
// параметр1 = 10;
//}

//объявление константного метода класса 
//запрещает меять ему какое-либо из св-в  обекта
//                                          \/
//void fnc1(тип1 параметр1, тип2 параметр2)const

/*
int i = -15;
double d = 1000.5e03; //третья степень =1000.5 * 10^3 = 1000.5 * pow(10, 3) = 1000500
float result1;
long long result2;
result1 = i + d;
result2 = i / d;*/


int main()
{
	int i = -15;
	double d = 1000.5e03; //третья степень =1000.5 * 10^3 = 1000.5 * pow(10, 3) = 1000500
	float result1;
	long long result2;
	result1 = i + d;
	result2 = i / d;
	/*
	const char *ch1 = "123.4"; // {'1', '2', '3', 0} = {'1', '2', '3', '\0'}
	const char *ch2 = "456.7";
	*/
	char ch1[255] = "123.4";
	char ch2[255] = "456.7";


	std::cout << "First: ";
	std::cin >> ch1;
	std::cout << std::endl;

	std::cout << "Second: ";
	std::cin >> ch2;
	std::cout << std::endl;

	i = atoi(ch1);// для doule
	d = atof(ch2);// в int или 
	d += i;

	std::cout << d << std::endl;

	getchar();
	return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
